name: Create Release

on:
  workflow_call:
    inputs:
      package_name:
        description: 'Name of package, e.g. "alphadia", "peptdeep", ..'
        type: string
        required: true
      # optional parameters and switches
      commitish_to_release:
        type: string
        description: 'Enter commit hash or branch to release (default: main).'
        default: "main"
      build_nodejs_ui:
        description: 'Whether or not a nodejs UI needs to be built'
        type: boolean
        default: false
      test_app:
        description: 'Whether or not it should be tested that the executable is valid'
        type: boolean
        default: false
      python_version:
        description: "Python version to be used"
        type: string
        default: "3.11"
      skip_macos_arm64_build:
        description: 'Whether or not to skip the build for MacOS ARM64'
        type: boolean
        default: false
      src_folder:
              description: "Folder that contains the __init__.py file with the __version__ attribute. If not given,  `<packagename>/` is used"
              type: string
              default: ""


jobs:
  Create_Release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_release_tag.outputs.new_version }}
      release_tag: ${{ steps.get_release_tag.outputs.release_tag }}
      release_id: ${{ steps.create_release.outputs.id }}
      run_linux: ${{ steps.get_os.outputs.run_linux }}
      run_macos: ${{ steps.get_os.outputs.run_macos }}
      run_windows: ${{ steps.get_os.outputs.run_windows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commitish_to_release }}
          fetch-depth: 0  # required to be able to check for existing tags

      - name: Get release tag
        id: get_release_tag
        shell: bash -el {0}
        # the DEBUG_RELEASE_WORKFLOW_SUFFIX repository variable can be set to get a unique tag in order to test the release workflow
        run: |
          if [ ! -z "${{ inputs.src_folder }}" ]; then  
            init_file=${{ inputs.src_folder }}/__init__.py  
          else:  
            init_file=${{ inputs.package_name }}/__init__.py  
          fi  
          CURRENT_VERSION=$(grep "__version__" $init_file | cut -f3 -d ' ' | sed 's/"//g')
          if [ "$CURRENT_VERSION" == "" ]; then
            echo "Could not determine version from $init_file"
            exit 1
          fi
          
          RELEASE_TAG=v${CURRENT_VERSION}${{vars.DEBUG_RELEASE_WORKFLOW_SUFFIX}}
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          TAG="${{ steps.get_release_tag.outputs.release_tag }}"
          if git show-ref --tags --verify --quiet "refs/tags/${TAG}"; then
            echo "Tag ${TAG} exists. Did you forget to bump the version?"
            echo If you want to test or debug the release workflow, use the DEBUG_RELEASE_WORKFLOW_SUFFIX repo variable.
            exit 1
          fi

      - name: Get supported OS
        id: get_os
        run: |
          if [[ -d 'release/macos' ]]; then
            echo "run_macos=true" >> $GITHUB_OUTPUT
          else
            echo "run_macos=false" >> $GITHUB_OUTPUT
          fi
          if [[ -d 'release/linux' ]]; then
            echo "run_linux=true" >> $GITHUB_OUTPUT
          else
            echo "run_linux=false" >> $GITHUB_OUTPUT
          fi
          if [[ -d 'release/windows' ]]; then
            echo "run_windows=true" >> $GITHUB_OUTPUT
          else
            echo "run_windows=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.get_release_tag.outputs.release_tag }}
          tag_name: ${{ steps.get_release_tag.outputs.release_tag }}
          target_commitish: ${{ inputs.commitish_to_release }}
          draft: True

      # for some reason, the above step started failing once
#      - name: Create release (alternative)
#        if: ${{ steps.create_release.conclusion == 'failure' }}
#        env:
#          GH_TOKEN: ${{ github.token }}
#        run: |
#          gh api \
#            --method POST \
#            -H "Accept: application/vnd.github+json" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            /repos/${{ github.repository }}/releases \
#            -f "tag_name=${{ steps.get_release_tag.outputs.release_tag }}" \
#            -f "name=${{ steps.get_release_tag.outputs.release_tag }}" \
#            -f "target_commitish=${{ inputs.commitish_to_release }}" \
#            -F "draft=true"

  Create_Linux_Installer:
    needs: [ Create_Release ]
    if: ${{ needs.Create_Release.outputs.run_linux == 'true' }}
    uses: ./.github/workflows/_create_artifact.yml
    with:
      package_name: ${{ inputs.package_name }}
      new_version: ${{ needs.Create_Release.outputs.new_version }}
      release_tag: ${{ needs.Create_Release.outputs.release_tag }}
      release_id: ${{ needs.Create_Release.outputs.release_id }}
      os: linux
      runner: ubuntu-latest
      python_version: ${{ inputs.python_version }}
      build_nodejs_ui: ${{ inputs.build_nodejs_ui }}
      test_app: ${{ inputs.test_app }}
      commitish_to_release: ${{ inputs.commitish_to_release }}

  Create_MacOS_Installer:
    needs: [Create_Release]
    if: ${{ needs.Create_Release.outputs.run_macos == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        runner:
          - macos-latest-xlarge
          - macos-13
        exclude:
          - runner: ${{ inputs.skip_macos_arm64_build && 'macos-latest-xlarge' }}
    uses: ./.github/workflows/_create_artifact.yml
    with:
      package_name: ${{ inputs.package_name }}
      new_version: ${{ needs.Create_Release.outputs.new_version }}
      release_tag: ${{ needs.Create_Release.outputs.release_tag }}
      release_id: ${{ needs.Create_Release.outputs.release_id }}
      os: macos
      runner: ${{ matrix.runner }}
      python_version: ${{ inputs.python_version }}
      build_nodejs_ui: ${{ inputs.build_nodejs_ui }}
      test_app: ${{ inputs.test_app }}
      commitish_to_release: ${{ inputs.commitish_to_release }}

  Create_Windows_Installer:
    needs: [Create_Release]
    if: ${{ needs.Create_Release.outputs.run_windows == 'true' }}
    uses: ./.github/workflows/_create_artifact.yml
    with:
      package_name: ${{ inputs.package_name }}
      new_version: ${{ needs.Create_Release.outputs.new_version }}
      release_tag: ${{ needs.Create_Release.outputs.release_tag }}
      release_id: ${{ needs.Create_Release.outputs.release_id }}
      os: windows
      runner: windows-latest
      python_version: ${{ inputs.python_version }}
      build_nodejs_ui: ${{ inputs.build_nodejs_ui }}
      test_app: ${{ inputs.test_app }}
      commitish_to_release: ${{ inputs.commitish_to_release }}
