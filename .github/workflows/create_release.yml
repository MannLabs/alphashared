on:
  workflow_call:
    inputs:
      package_name:
        description: 'Name of package, e.g. "alphadia", "peptdeep", ..'
        required: true
        type: string
      commit_to_release:
        description: 'Enter commit hash to release (example: ef4037cb571f99cb4919b520fde7174972aae473)'
        type: string
        required: true
      tag_to_release:
        description: 'Enter tag of the new release to create (example: v1.5.5). Note that the code version needs to be bumped already.'
        type: string
        required: true
      # optional switches
      build_nodejs_ui:
        description: 'Whether or not a nodejs UI needs to be built'
        default: false
        type: boolean
      test_app:
        description: 'Whether or not the app should be tested'
        default: true
        type: boolean
      python_version:
        description: "Python version to be used"
        default: "3.9"  # TODO change to 3.11
        type: string



name: Create Draft Release

jobs:
  Get_New_Version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check_release_tag.outputs.new_version }}
      run_linux: ${{ steps.check_os.outputs.run_linux }}
      run_macos: ${{ steps.check_os.outputs.run_macos }}
      run_windows: ${{ steps.check_os.outputs.run_windows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_to_release }}

      - name: Check release tag
        id: check_release_tag
        shell: bash -le {0}
        run: |
          CURRENT_VERSION=$(grep "__version__" ${{ inputs.package_name }}/__init__.py | cut -f3 -d ' ' | sed 's/"//g')
          if [ "v${CURRENT_VERSION}" != "${{ inputs.tag_to_release }}" ]; then
            echo Code version "v${CURRENT_VERSION}" does not match the tag to release ${{ inputs.tag_to_release }}

          fi
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      # exit 1  #TODO add again
      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ inputs.tag_to_release }}

      - name: Check if tag already exists
        run: |
          echo "Tag already exists!"
          exit 1
        if: steps.check-tag.outputs.exists == 'true'

      - name: Check supported OS
        id: check_os
        run: |
          if [[ -d 'release/macos' ]]; then
            echo "run_macos=true" >> $GITHUB_OUTPUT
          else
            echo "run_macos=false" >> $GITHUB_OUTPUT
          fi
          if [[ -d 'release/linux' ]]; then
            echo "run_linux=true" >> $GITHUB_OUTPUT
          else
            echo "run_linux=false" >> $GITHUB_OUTPUT
          fi
          if [[ -d 'release/windows' ]]; then
            echo "run_windows=true" >> $GITHUB_OUTPUT
          else
            echo "run_windows=false" >> $GITHUB_OUTPUT
          fi

  Create_Draft_Release:
    runs-on: ubuntu-latest
    needs: Get_New_Version
    outputs:
      upload_url: ${{ steps.draft_release.outputs.upload_url }}
    steps:
      - name: Draft Release
        id: draft_release
        # TODO this action is deprecated, replace with https://github.com/ncipollo/release-action
        # cf. https://github.com/actions/create-release/issues/119#issuecomment-783010321
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag_to_release }}
          release_name: ${{ inputs.tag_to_release }}
          draft: true
          prerelease: false

  Create_Linux_Installer:
    needs: [ Create_Draft_Release, Get_New_Version ]
    if: ${{ needs.Get_New_Version.outputs.run_linux == 'true' }}
    runs-on: ubuntu-latest
    env:
      ARCH: x64 # this can be overwritten during the course of the job
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_to_release }}

    - name: Install conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        activate-environment: alphax_release
        python-version: "${{ inputs.python_version }}"

    - name: Conda info
      shell: bash -el {0}
      run: |
        conda info

    - name: Install pyinstaller 6.10.0
      shell: bash -el {0}
      run: |
        pip install pyinstaller==6.10.0
        pip freeze

    - name: Build installer
      shell: bash -l {0}
      run: |
        release/linux/build_installer_linux.sh
        pip freeze
        ls *
        ls dist/*

    - name: Test app
      if: ${{ inputs.test_app }}
      continue-on-error: true  # TODO: remove
      shell: bash -el {0}
      run: |
        EXECUTABLE=dist/${{ inputs.package_name }}/${{ inputs.package_name }}
        echo testing ${EXECUTABLE} ..
        eval ${EXECUTABLE} --version

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      
    # TODO: building node.js GUI not supported yet for linux

    - name: Build package
      id: build_package
      shell: bash -l {0}
      run: |
        release/linux/build_package_linux.sh
        ls *
        ls dist/*
        ARTIFACT_NAME=${{ inputs.package_name }}-${{ needs.Get_New_Version.outputs.new_version }}-linux-${{ env.ARCH }}.deb
        echo ARTIFACT_NAME=$ARTIFACT_NAME >> $GITHUB_OUTPUT

    - name: Test package
      id: test_package
      shell: bash -l {0}
      run: |
        sudo dpkg -i dist/${{steps.build_package.outputs.ARTIFACT_NAME}}

    - name: Upload installer
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.Create_Draft_Release.outputs.upload_url }}
        asset_path: dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
        asset_name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
        asset_content_type: application/zip

    # Fallback upload to be able to manually debug the artifact
    - name: Upload installer as job asset
      if: ${{ failure() && steps.test_package.conclusion == 'failure' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
        path: dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
        if-no-files-found: error

  Create_MacOS_Installer:
    needs: [Create_Draft_Release, Get_New_Version]
    if: ${{ needs.Get_New_Version.outputs.run_macos == 'true' }}
    strategy:
      matrix:
        runner:
          - macos-latest-xlarge # this is ARM
          - macos-13 # this is not ARM
    runs-on: ${{matrix.runner}}
    env:
      ARCH: x64  # this can be overwritten during the course of the job
      EAGER_IMPORT: true  # TODO move to alphadia?
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_to_release }}

    - name: Install conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        activate-environment: alphax_release
        python-version: "${{ inputs.python_version }}"

    - name: Conda info
      shell: bash -el {0}
      run: |
        conda info

    - name: Install pyinstaller 6.10.0
      shell: bash -el {0}
      run: |
        pip install pyinstaller==6.10.0
        pip freeze

    - name: Build installer
      shell: bash -el {0}
      run: |
        release/macos/build_installer_macos.sh
        pip freeze
        ls *
        ls dist/*

    - name: Test app
      if: ${{ inputs.test_app }}
      continue-on-error: true  # TODO: remove
      shell: bash -el {0}
      run: |
        EXECUTABLE=dist/${{ inputs.package_name }}/${{ inputs.package_name }}
        echo testing ${EXECUTABLE} ..
        eval ${EXECUTABLE} --version

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      
    # Build GUI
    - name: Setup Node.js
      if: ${{ inputs.build_nodejs_ui }}
      uses: actions/setup-node@v4

    - name: Build Node.js GUI
      if: ${{ inputs.build_nodejs_ui }}
      run: |
        release/macos/build_gui_macos.sh
        ls *

    - name: Build package
      id: build_package
      shell: bash -el {0}
      run: |
        release/macos/build_package_macos.sh
        ls *
        ls dist/*
        ARTIFACT_NAME=${{ inputs.package_name }}-${{ needs.Get_New_Version.outputs.new_version }}-darwin-${{ env.ARCH }}.pkg
        echo ARTIFACT_NAME=$ARTIFACT_NAME >> $GITHUB_OUTPUT
        
    - name: Test package
      id: test_package
      shell: bash -l {0}
      run: |
        sudo installer -pkg dist/${{steps.build_package.outputs.ARTIFACT_NAME}} -target /
        exit 1

    - name: Upload installer
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ needs.Create_Draft_Release.outputs.upload_url }}
          asset_path: dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
          asset_name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
          asset_content_type: application/zip

    # Fallback upload to be able to manually debug the artifact
    - name: Upload installer as job asset
      if: ${{ failure() && steps.test_package.conclusion == 'failure' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
        path: dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
        if-no-files-found: error

  Create_Windows_Installer:
    needs: [Create_Draft_Release, Get_New_Version]
    if: ${{ needs.Get_New_Version.outputs.run_windows == 'true' }}
    runs-on: windows-latest
    env:
      ARCH: x64 # this can be overwritten during the course of the job
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.commit_to_release }}

    - name: Install conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        activate-environment: alphax_release
        python-version: "${{ inputs.python_version }}"

    - name: Conda info
      shell: bash -el {0}
      run: |
        conda info

    - name: Install pyinstaller 6.10.0
      shell: bash -el {0}
      run: |
        pip install pyinstaller==6.10.0
        pip freeze

    - name: Build installer
      shell: powershell
      run: |
        release/windows/build_installer_windows.ps1
        pip freeze
        ls *
        ls dist/*

    - name: Test app
      if: ${{ inputs.test_app }}
      continue-on-error: true  # TODO: remove
      shell: powershell
      run: |
        dist\${{ inputs.package_name }}\${{ inputs.package_name }}.exe --version

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      
    # Build GUI
    - name: Setup Node.js
      if: ${{ inputs.build_nodejs_ui }}
      uses: actions/setup-node@v4

    - name: Build Node.js GUI
      if: ${{ inputs.build_nodejs_ui }}
      shell: powershell
      run: |
        release/windows/build_gui_windows.ps1

    - name: Build package
      id: build_package
      shell: powershell
      run: |
        release/windows/build_package_windows.ps1
        ls *
        ls dist/*
        ARTIFACT_NAME=${{ inputs.package_name }}-${{ needs.Get_New_Version.outputs.new_version }}-win-${{ env.ARCH }}.exe
        echo ARTIFACT_NAME=$ARTIFACT_NAME >> $GITHUB_OUTPUT
        
    - name: Test package
      id: test_package
      shell: bash -l {0}
      run: |
        release/windows/dist/${{steps.build_package.outputs.ARTIFACT_NAME}} //verysilent //SUPPRESSMSGBOXES //log=log.txt //noicons //tasks= //portable=1
        cat log.txt

    - name: Upload installer
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ needs.Create_Draft_Release.outputs.upload_url }}
          asset_path: release/windows/dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
          asset_name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
          asset_content_type: application/zip

    # Fallback upload to be able to manually debug the artifact
    - name: Upload installer as job asset
      if: ${{ failure() && steps.test_package.conclusion == 'failure' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{steps.build_package.outputs.ARTIFACT_NAME}}
        path: dist/${{steps.build_package.outputs.ARTIFACT_NAME}}
        if-no-files-found: error