name: Publish on PyPi

on:
  workflow_call:
    inputs:
      package_name:
        description: 'Name of package, e.g. "alphadia", "peptdeep", ..'
        type: string
        required: true
      tag_to_release:
        description: 'Enter tag to release (example: v1.5.5). A tag with the same name must exist in the repository.'
        type: string
        required: true
      python_version:
        description: "Python version to be used"
        type: string
        default: "3.11"
      use_pyproject_toml:
        description: 'Whether the project uses pyproject.toml or the legacy setup.py-absed mechanism.'
        type: boolean
        default: true
      only_testpypi_release:
        description: 'If true, the release on "real" pypi will be skipped.'
        type: boolean
        default: false
      src_folder:
        description: "Folder that contains the __init__.py file with the __version__ attribute. If not given,  `<packagename>/` is used"
        type: string
        default: ""
      test_stable:
        description: "Whether to test also the stable version of the package (defined by the '[stable]' extra)."
        type: boolean
        default: false
    secrets:
      test_pypi_api_token:
        description: 'PyPI token for the test API'
        required: true
      pypi_api_token:
        description: 'PyPI token for the real API'
        required: true

env:
  PYTHON_VERSION: "${{ inputs.python_version }}"

jobs:
  Create_PyPi_Release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_current_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_to_release }}
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Conda info
        shell: bash -le {0}
        run: conda info
      - name: Get current version
        id: get_current_version
        shell: bash -l {0}
        run: |
          if [ ! -z "${{ inputs.src_folder }}" ]; then  
            init_file=${{ inputs.src_folder }}/__init__.py  
          else
            init_file=${{ inputs.package_name }}/__init__.py  
          fi  
          CURRENT_VERSION=$(grep "__version__" $init_file | cut -f3 -d ' ' | sed 's/"//g')
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Prepare distribution
        shell: bash -le {0}
        run: |
          conda create -n build_env python=${{ env.PYTHON_VERSION }} -y
          conda activate build_env
          python -m pip install --upgrade pip
          pip install build twine
          
          if [ "${{ inputs.use_pyproject_toml }}" == "true" ]; then
            echo "Building using pyproject.toml"
            python -m build
          else
            echo "Building using setup.py"
            python setup.py sdist bdist_wheel
          fi
         
          conda deactivate
          conda env remove --name build_env -y
          conda clean --all -y
      - name: Publish distribution to Test-PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: true # this is to cover cases where the upload has already been done but some downstream steps failed
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.test_pypi_api_token }}
      - name: Check Test-PyPI installation  # TODO reduce code duplication here
        shell: bash -l {0}
        run: |
          conda create -n pip_standard_test python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_standard_test
          command='pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "${{ inputs.package_name }}==${{ steps.get_current_version.outputs.new_version }}"'
                   
          # try 3 times to install the package to cover delays on pypi side
          max_attempts=3
          attempt=1
          failed=0
          while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts"
              eval $command || failed=1
              if [  "$failed" == "0" ]; then  # cannot check for $? == 0 here because of github specifics
                  break
              else  
                  attempt=$((attempt + 1))
                  failed=0
              fi
          done
          
          python -c "import ${{ inputs.package_name }}; print(${{ inputs.package_name }}.__version__)"

          conda deactivate
          conda env remove --name pip_standard_test -y
          conda clean --all -y
      - name: Check Test-PyPI stable installation
        if: ${{ inputs.test_stable  == 'true' }}
        shell: bash -l {0}
        run: |
          conda create -n pip_stable_test python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_stable_test
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple "${{ inputs.package_name }}[stable]==${{ steps.get_current_version.outputs.new_version }}"
         
          python -c "import ${{ inputs.package_name }}; print(${{ inputs.package_name }}.__version__)"
          
          conda deactivate
          conda env remove --name pip_stable_test -y
          conda clean --all -y
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_api_token }}
  Test_PyPi_Release:
    name: Test_PyPi_version_on_${{ matrix.os }}
    needs: Create_PyPi_Release
    if: ${{ inputs.only_testpypi_release  != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Conda info
        shell: bash -le {0}
        run: conda info
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Check PyPI installation
        shell: bash -l {0}
        run: |
          conda create -n pip_standard python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_standard
          command='pip install "${{ inputs.package_name }}==${{ needs.Create_PyPi_Release.outputs.new_version }}"'
          
          # try 3 times to install the package to cover delays on pypi side
          max_attempts=3
          attempt=1
          failed=0
          while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts"
              eval $command || failed=1
              if [  "$failed" == "0" ]; then  # cannot check for $? == 0 here because of github specifics
                  break
              else  
                  attempt=$((attempt + 1))
                  failed=0
              fi
          done
                    
          python -c "import ${{ inputs.package_name }}; print(${{ inputs.package_name }}.__version__)"
          
          conda deactivate
          conda env remove --name pip_standard -y
          conda clean --all -y
      - name: Check PyPI stable installation
        if: ${{ inputs.test_stable  == 'true' }}
        shell: bash -l {0}
        run: |
          conda create -n pip_stable python=${{ env.PYTHON_VERSION }} -y
          conda activate pip_stable
          pip install ${{ inputs.package_name }}[stable]==${{ needs.Create_PyPi_Release.outputs.new_version }}
          
          python -c "import ${{ inputs.package_name }}; print(${{ inputs.package_name }}.__version__)"
          
          conda deactivate
          conda env remove --name pip_stable -y
          conda clean --all -y
